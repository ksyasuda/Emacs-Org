#+TITLE: Fault Localization
#+DATE: Fri Dec 11 12:40:28 2020 

* Modern software is huge
* Humans are poor at comprehending large scales
* Fault localization is the task of identifying source code regions implicated in a bug
** regresssion test is failing, which lines should we change to fix it
** answer is not unique: there are often many places to fix a bug
** debugging includes fault localization
** answer may take the form of a list ranked by sus
* Debuggers
** can operate on source code or assembly code
** inspect values of registers, memory
** key features
*** attach to process
*** single-stepping
*** breakpoints
*** conditional breakpoints
*** watchpoints
* Signals
** a signal is an asynchronous notification sent to a process about an event
*** Ctrl+C
*** exceptions (divide by zero, null ptr)
*** from the OS (SIGPIPE)
** can install a signal handler - a procedure that will be executed when the signal occurs
*** signal handlers are vulnerable to race conditions
* Attaching a Debugger
** requires operating system support
** special system call that allows one process to act as a debugger for a target
*** what are security concerns
** once this is done, debugger can basically "catch signals" delivered to the target
* Building a debugger
** attach to target
** set up signal handler
** add in exception-causing instructions
** inspect globals, etc.
* Advanced breakpoints
** optimization: hardware breakpoints
*** special register: if PC = HBP register value, signal an exception
*** faster than software, works on ROMs, only limited number of breakpoints
** feature: conditional breakpoint
*** break at instruction x if some_variable = some_value
** signal handler checks the condition
*** if so, present interactive debugging prompt
*** if not, return to program immediately
*** fast or slow?
**** probably slow
* Single-Stepping
** debuggers also allow you to advance through code one instruction at a time
** equivalent to
*** put breakpoint at next instruction
*** resume execution
*** repeat
* Watchpoints
** you want to know when a variable changes
** watchpoint is like a breakpoint but it stops execution after any instruction changes the value at location L
*** Software watchpoints
**** put breakpoint at every instruction
**** check if value of L against stored value
*** hardware watchpoints
**** special register holds L: if value at address L every changes, the CPU raises an exception
